name: PERN CI Workflow

on:
  push:
    branches:
      - main # Trigger on push to the 'main' branch
  # pull_request:
  #   branches:
  #     - main # Trigger on pull requests targeting the 'main' branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Node.js (specifying the version of Node.js you want)
      - name: Setup Node.js
        uses: actions/setup-node@v4.2.0
        with:
          node-version: "18" # You can change this to the version required for your app

      # Step 3: Install dependencies using npm (only the versions specified in package.json)
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci  # This will install dependencies exactly as listed in package-lock.json

      # Step 4: Install dependencies using npm (only the versions specified in package.json)
      # This will install dependencies exactly as listed in package-lock.json
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci  
      
      - name: Create .env file
        run: |
          touch .env.prod
          echo "API_URL=${{secrets.API_URL}}" >> .env.prod
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.prod
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.prod
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.prod
          echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env.prod
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.prod

      # Step 5: Build the Next.js application
      - name: Build the frontend app
        run: |
          cd frontend
          npm run build
      
      # Step 6: Build the backend application
      - name: Build the backend app
        run: |
          cd backend
          npm run start

  # Extract and log the versions of dependencies in package.json
  get-dependencies:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      #To list installed dependencies with versions
      - name: Get and log dependency versions
        run: |
          npm list --depth=0 --json  

  #docker container image build
  docker-build:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      # Step: Set up Docker Compose
      - name: Set up Docker Compose
        uses: docker/setup-compose-action@v1
        with:
          version: latest

      # - name: Create .env file
      #   run: |
      #     touch .env.prod
      #     echo "API_URL=${{secrets.API_URL}}" >> .env.prod
      #     echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.prod
      #     echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.prod
      #     echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env.prod
      #     echo "POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}" >> .env.prod
      #     echo "DB_PORT=${{ secrets.DB_PORT }}" >> .env.prod
    
      # Build the frontend and backend images using docker-compose
      - name: Build Docker Containers with Compose
        run: |
          docker compose -f compose.yml build --no-cache

  # Docker Push Job (Push Images to Registry)
  docker-push:
    runs-on: ubuntu-latest
    needs:
      - docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      # Docker Push for Backend and Frontend images using docker-compose
      - name: Push Docker Images using Compose
        uses: docker/build-push-action@v6
        with:
          context: .
          file: compose.yaml
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.run_id }}
            ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.run_id }}

  Image-Scanning:
    runs-on: ubuntu-latest
    needs: docker-push
    steps:
      - name: Login to Dockerhub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Docker Scout
        id: docker-scout
        uses: docker/scout-action@v1
        with:
          command: cves,recommendations
          image: ${{ steps.meta.outputs.tags }}
          ignore-unchanged: true
          only-severities: critical,high
          write-comment: true
          github-token: ${{ secrets.MYTOKEN }}

  # Update Kubernetes Deployment (Optional)
  update-k8s:
    runs-on: ubuntu-latest
    needs: docker-push
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.MYTOKEN }}

      - name: Update Backend Image Tag in Kubernetes Manifest
        run: |
          sed -i "s|image: .*backend.*|image: ${{ secrets.DOCKER_USERNAME }}/backend:${{ github.run_id }}|" k8s/backend/deploy.yaml
          sed -i "s|image: .*frontend.*|image: ${{ secrets.DOCKER_USERNAME }}/frontend:${{ github.run_id }}|" k8s/frontend/deploy.yaml

      - name: Commit and Push Changes to Kubernetes Manifests
        run: |
          git config --global user.email "siddhikhapare77@gmail.com"
          git config --global user.name "siddhikhapare"
          git add k8s/frontend/deploy.yaml k8s/backend/deploy.yaml
          git commit -m "[CI] Update Docker image tags for backend and frontend"
          git push origin HEAD:main -f


